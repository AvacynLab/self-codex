version: "3.9"

# Docker Compose stack dedicated to the search subsystem. The file keeps the
# services isolated from the default development environment so contributors can
# opt-in only when working on the search pipeline.
services:
  searxng:
    image: searxng/searxng:latest
    container_name: mcp-searxng
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./searxng/settings.yml:/etc/searxng/settings.yml:ro
    healthcheck:
      # The image lacks curl/wget by default. Use Python's socket library to
      # verify that the HTTP listener is accepting TCP connections instead of
      # issuing full HTTP requests (which may fail if the application has not
      # finished booting yet).
      test:
        - CMD-SHELL
        - |
          python3 - <<'PYTHON'
          import socket
          import sys

          ADDRESS = ("127.0.0.1", 8080)

          def main() -> int:
              try:
                  with socket.create_connection(ADDRESS, timeout=5):
                      return 0
              except OSError:
                  return 1

          sys.exit(main())
          PYTHON
      interval: 10s
      timeout: 5s
      retries: 6
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1024M
    networks:
      - search_net

  unstructured:
    image: quay.io/unstructured-io/unstructured-api:latest
    container_name: mcp-unstructured
    restart: unless-stopped
    ports:
      - "127.0.0.1:8000:8000"
    healthcheck:
      # Similar to the SearxNG probe, rely on a TCP dial to detect when the
      # FastAPI server is bound and accepting requests. The application exposes
      # HTTP-only interfaces, so establishing the socket is a sufficient
      # readiness signal for the e2e search tests.
      test:
        - CMD-SHELL
        - |
          python3 - <<'PYTHON'
          import socket
          import sys

          ADDRESS = ("127.0.0.1", 8000)

          def main() -> int:
              try:
                  with socket.create_connection(ADDRESS, timeout=5):
                      return 0
              except OSError:
                  return 1

          sys.exit(main())
          PYTHON
      interval: 15s
      timeout: 10s
      retries: 6
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1536M
    networks:
      - search_net

  server:
    container_name: mcp-search-server
    build:
      context: ..
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      searxng:
        condition: service_healthy
      unstructured:
        condition: service_healthy
    environment:
      START_HTTP: "1"
      MCP_HTTP_HOST: 0.0.0.0
      MCP_HTTP_PORT: "8765"
      MCP_HTTP_PATH: /mcp
      MCP_HTTP_ALLOW_NOAUTH: "1"
      SEARCH_SEARX_BASE_URL: http://searxng:8080
      SEARCH_SEARX_API_PATH: /search
      SEARCH_SEARX_TIMEOUT_MS: "15000"
      SEARCH_SEARX_ENGINES: bing,ddg,wikipedia,arxiv,github
      SEARCH_SEARX_CATEGORIES: general,news,images,files
      SEARCH_FETCH_TIMEOUT_MS: "20000"
      SEARCH_FETCH_MAX_BYTES: "15000000"
      SEARCH_FETCH_UA: CodexSearchBot/1.0
      UNSTRUCTURED_BASE_URL: http://unstructured:8000
      UNSTRUCTURED_TIMEOUT_MS: "30000"
      UNSTRUCTURED_STRATEGY: hi_res
      SEARCH_INJECT_GRAPH: "1"
      SEARCH_INJECT_VECTOR: "1"
    ports:
      - "127.0.0.1:8765:8765"
    networks:
      - search_net

networks:
  search_net:
    driver: bridge
