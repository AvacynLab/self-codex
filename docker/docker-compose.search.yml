version: "3.9"

# Docker Compose stack dedicated to the search subsystem. The file keeps the
# services isolated from the default development environment so contributors can
# opt-in only when working on the search pipeline. Resource limits and logging
# caps are applied so the stack remains CI friendly.
services:
  searxng:
    image: searxng/searxng:latest
    container_name: mcp-searxng
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./searxng/settings.yml:/etc/searxng/settings.yml:ro
    healthcheck:
      # HTTP based readiness probe so `depends_on` can rely on the
      # `service_healthy` condition. We target the JSON endpoint to
      # ensure the search API is fully initialised instead of merely
      # exposing the landing page.
      test:
        - CMD-SHELL
        - |
          curl --fail --silent --show-error \
            --request POST \
            --data-urlencode 'q=healthcheck' \
            --data 'format=json' \
            http://127.0.0.1:8080/search \
            --output /dev/null || exit 1
      interval: 15s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1024M
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - search_net

  unstructured:
    image: quay.io/unstructured-io/unstructured-api:latest
    container_name: mcp-unstructured
    restart: unless-stopped
    ports:
      - "127.0.0.1:8000:8000"
    healthcheck:
      # POST ping mirroring the production readiness probe exposed by the
      # Unstructured container.
      test:
        - CMD-SHELL
        - |
          curl --fail --silent --show-error \
            --request POST \
            --header 'Content-Type: application/json' \
            --data '{"ping": "search-stack"}' \
            http://127.0.0.1:8000/healthcheck || exit 1
      interval: 15s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1536M
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - search_net

  server:
    container_name: mcp-search-server
    build:
      context: ..
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      searxng:
        condition: service_healthy
      unstructured:
        condition: service_healthy
    environment:
      START_HTTP: "1"
      MCP_HTTP_HOST: 0.0.0.0
      MCP_HTTP_PORT: "8765"
      MCP_HTTP_PATH: /mcp
      MCP_HTTP_ALLOW_NOAUTH: "1"
      MCP_RUNS_ROOT: /app/validation_run
      MCP_LOG_FILE: /app/validation_run/logs/self-codex.log
      SEARCH_SEARX_BASE_URL: http://searxng:8080
      SEARCH_SEARX_API_PATH: /search
      SEARCH_SEARX_TIMEOUT_MS: "15000"
      SEARCH_SEARX_ENGINES: ddg,wikipedia,arxiv,github,mojeek
      SEARCH_SEARX_CATEGORIES: general,news,images,files
      SEARCH_FETCH_TIMEOUT_MS: "20000"
      SEARCH_FETCH_MAX_BYTES: "15000000"
      SEARCH_FETCH_UA: CodexSearchBot/1.0
      SEARCH_FETCH_RESPECT_ROBOTS: "1"
      SEARCH_PARALLEL_FETCH: "4"
      SEARCH_PARALLEL_EXTRACT: "2"
      SEARCH_MAX_RESULTS: "12"
      UNSTRUCTURED_BASE_URL: http://unstructured:8000
      UNSTRUCTURED_TIMEOUT_MS: "30000"
      UNSTRUCTURED_STRATEGY: hi_res
      SEARCH_INJECT_GRAPH: "1"
      SEARCH_INJECT_VECTOR: "1"
    ports:
      - "127.0.0.1:8765:8765"
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - search_net

networks:
  search_net:
    driver: bridge
